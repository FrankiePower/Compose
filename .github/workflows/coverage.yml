name: CI

on:
  push:
    branches: [main]
  pull_request:
    paths-ignore:
      - '**.md'
  workflow_dispatch:

env:
  FOUNDRY_PROFILE: ci

jobs:
  check:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Run coverage
        run: |
          forge coverage --report summary --report lcov
          ls -la lcov.info || echo "lcov.info not found"

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const file = 'lcov.info';
            let pct = '-';
            if (fs.existsSync(file)) {
              const content = fs.readFileSync(file, 'utf8');
              const match = content.match(/LF:\s*(\d+)\s*LH:\s*(\d+)/);
              if (match) {
                const total = Number(match[1]);
                const covered = Number(match[2]);
                pct = Math.round((covered / total)*100) + '%';
              }
                
              // THIS IS THE THRESHOLDS 
              const goodThreshold = 80;
              const needsImprovementThreshold = 60;
              const poorThreshold = 40;
              
              // Parse more detailed coverage info - sum all individual file records
              const lines = content.split('\n');
              let totalLines = 0;
              let coveredLines = 0;
              let totalFunctions = 0;
              let coveredFunctions = 0;
              let totalBranches = 0;
              let coveredBranches = 0;
              
              // LF:, LH:, FNF:, FNH:, BRF:, BRH: are on separate lines
              // We need to track them separately and match them up
              for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                
                // Lines Found and Lines Hit
                if (line.startsWith('LF:')) {
                  totalLines += parseInt(line.substring(3)) || 0;
                }
                if (line.startsWith('LH:')) {
                  coveredLines += parseInt(line.substring(3)) || 0;
                }
                
                // Functions Found and Functions Hit
                if (line.startsWith('FNF:')) {
                  totalFunctions += parseInt(line.substring(4)) || 0;
                }
                if (line.startsWith('FNH:')) {
                  coveredFunctions += parseInt(line.substring(4)) || 0;
                }
                
                // Branches Found and Branches Hit
                if (line.startsWith('BRF:')) {
                  totalBranches += parseInt(line.substring(4)) || 0;
                }
                if (line.startsWith('BRH:')) {
                  coveredBranches += parseInt(line.substring(4)) || 0;
                }
              }
              
              console.log('Summed totals - Lines:', totalLines, 'Covered:', coveredLines);
              console.log('Summed totals - Functions:', totalFunctions, 'Covered:', coveredFunctions);
              console.log('Summed totals - Branches:', totalBranches, 'Covered:', coveredBranches);
              
              const lineCoverage = totalLines > 0 ? Math.round((coveredLines / totalLines) * 100) : 0;
              const functionCoverage = totalFunctions > 0 ? Math.round((coveredFunctions / totalFunctions) * 100) : 0;
              const branchCoverage = totalBranches > 0 ? Math.round((coveredBranches / totalBranches) * 100) : 0;
              
              // Create coverage badge
              const getBadgeColor = (coverage) => {
                if (coverage >= goodThreshold) return 'brightgreen';
                if (coverage >= needsImprovementThreshold) return 'yellow';
                if (coverage >= poorThreshold) return 'orange';
                return 'red';
              };
              
              const badgeColor = getBadgeColor(lineCoverage);
              const badge = `![Coverage](https://img.shields.io/badge/coverage-${lineCoverage}%25-${badgeColor})`;
              
              const body = `## Coverage Report\n` +
                `${badge}\n\n` +
                `| Metric | Coverage | Details |\n` +
                `|--------|----------|----------|\n` +
                `| **Lines** | ${lineCoverage}% | ${coveredLines}/${totalLines} lines |\n` +
                `| **Functions** | ${functionCoverage}% | ${coveredFunctions}/${totalFunctions} functions |\n` +
                `| **Branches** | ${branchCoverage}% | ${coveredBranches}/${totalBranches} branches |\n\n`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            } else {
              console.log('Coverage file not found.');
            }
