name: Post Coverage Comment

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

permissions:
  actions: read
  pull-requests: write
  issues: write
  contents: read

jobs:
  comment:
    name: Post Coverage Comment
    runs-on: ubuntu-latest
    # Only run if the workflow run was for a pull request
    if: github.event.workflow_run.event == 'pull_request'
    steps:
      - name: Check workflow run status
        run: |
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run event: ${{ github.event.workflow_run.event }}"
          echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
      
      - name: Download and post coverage comment
        if: github.event.workflow_run.conclusion == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');
            
            // Download artifact
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            
            const coverageArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === 'coverage-data'
            );
            
            if (!coverageArtifact) {
              console.log('No coverage artifact found');
              return;
            }
            
            console.log('Found coverage artifact, downloading...');
            
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: coverageArtifact.id,
              archive_format: 'zip',
            });
            
            // Save and extract the artifact using execSync
            const artifactPath = path.join(process.env.GITHUB_WORKSPACE, 'coverage-data.zip');
            fs.writeFileSync(artifactPath, Buffer.from(download.data));
            
            console.log('Artifact downloaded, extracting...');
            
            // Unzip the artifact
            execSync(`unzip -o ${artifactPath} -d ${process.env.GITHUB_WORKSPACE}`);
            
            // Extract PR number
            const prDataPath = path.join(process.env.GITHUB_WORKSPACE, 'coverage-data.txt');
            const prData = fs.readFileSync(prDataPath, 'utf8');
            const prMatch = prData.match(/PR_NUMBER=(\d+)/);
            
            if (!prMatch) {
              console.log('Could not find PR number in coverage-data.txt');
              return;
            }
            
            const prNumber = parseInt(prMatch[1]);
            console.log(`Processing coverage for PR #${prNumber}`);
            
            // Read coverage report
            const reportPath = path.join(process.env.GITHUB_WORKSPACE, 'coverage-report.md');
            const body = fs.readFileSync(reportPath, 'utf8');
            
            // Check if a coverage comment already exists
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## Coverage Report')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
              console.log('Coverage comment updated successfully!');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
              console.log('Coverage comment posted successfully!');
            }